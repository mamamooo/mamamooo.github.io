<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaMaMoo</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mamamooo.github.io/"/>
  <updated>2020-03-16T05:22:45.137Z</updated>
  <id>https://mamamooo.github.io/</id>
  
  <author>
    <name>mamamooo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stx-gui</title>
    <link href="https://mamamooo.github.io/2020/03/16/stx-gui/"/>
    <id>https://mamamooo.github.io/2020/03/16/stx-gui/</id>
    <published>2020-03-16T03:06:31.000Z</published>
    <updated>2020-03-16T05:22:45.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="StarlingX-GUI-源码分析"><a href="#StarlingX-GUI-源码分析" class="headerlink" title="StarlingX GUI 源码分析"></a>StarlingX GUI 源码分析</h1><p>代码架构<br>GUI部分代码主要为starlingX dashboard的代码，主要功能为界面的操作和底层其他组件（Nova，Neutron，Cinder等）的交互。代码架构为Django框架。</p><a id="more"></a> <p>Django是一个基于Python的高效的Web开发框架，它提供了通用的Web开发模式的高度抽象；目的是为了可以简便的、快速的开发数据库驱动的网站，强调代码的复用，多个组件可以很方便的以“插件”的形式存在于整个框架中。</p><p>代码目录如图</p><h1 id="代码目录分析"><a href="#代码目录分析" class="headerlink" title="代码目录分析"></a>代码目录分析</h1><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>主要是与其他组件的api接口代码</p><h2 id="Dashboards"><a href="#Dashboards" class="headerlink" title="Dashboards"></a>Dashboards</h2><p>主要负责后端逻辑。如登录页面，添加节点等操作</p><p>##Enabled<br>新增plane模块的注册配置，此处代码的主要功能是面板组的定义。</p><p>##Horizon<br>主要提供最基础的构件，如页面所需的表格、表单等基础部分；</p><p>##Static<br>主要存放前端代码。</p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>##Dashboards模块<br>###Admin<br>此部分代码包括<br>active_alarms<br>controller_services<br>datanets<br>events<br>events_suppression<br>host_topology<br>inventory<br>software_management<br>storage_overview<br>system_config<br>10个小模块，对应的页面的各自功能。<br>页面图待补</p><p>代码流程，此处以inventory为例讲解：<br>Inventory  主要功能是节点的增删改查操作，主要与底层的sysinv模块交互。</p><p>####1. 注册plane####</p><p>首先在enabled目录下注册inventory模块的plane,<br>即starlingx_dashboard/enabled/_2035_starlingx_admin_inventory_panel.py文件</p><p>ADD_PANEL = ‘starlingx_dashboard.dashboards.admin.inventory.panel.Inventory’<br>此处为class Inventory的位置</p><p>####2.    Inventory类####<br>Inventory类位于starlingx_dashboard/dashboards/admin/inventory/panel.py文件下:</p><pre><code>class Inventory(horizon.Panel):        #面板类       name = _("Host Inventory")        #面板名字    slug = 'inventory'            #面板短名字（面板url路径的短名字）Slug会为每条model记录    permissions = ('openstack.roles.admin',)    permissions = ('openstack.services.platform',)   #权限名称列表，定义了用户是否有权限访问该面板    def allowed(self, context):       ……    def nav(self, context):        #导航条，判断该面板是否出现导航        ……</code></pre><p>####3.    页面功能管理####<br>starlingx_dashboard/dashboards/admin/inventory/tables.py文件下主要为各个页面的功能的class。如Hosts，HostsController以及他的子功能AddHost，EditHost，DeleteHost等。</p><p>首先分析class Hosts：</p><pre><code>class Hosts(tables.DataTable):    hostname = tables.Column('hostname',                             link="horizon:admin:inventory:detail",                             verbose_name=_('Host Name'))    personality = tables.Column(        "personality",        verbose_name=_("Personality"),        display_choices=stx_api.sysinv.Host.PERSONALITY_DISPLAY_CHOICES)    admin = tables.Column("administrative",                          verbose_name=_("Admin State"),                          display_choices=stx_api.sysinv.                          Host.ADMIN_DISPLAY_CHOICES)    oper = tables.Column("operational",                         verbose_name=_("Operational State"),                         display_choices=stx_api.sysinv.                         Host.OPER_DISPLAY_CHOICES)    avail = tables.Column("availability",                          verbose_name=_("Availability State"),                          display_choices=stx_api.sysinv.                          Host.AVAIL_DISPLAY_CHOICES)    uptime = tables.Column('boottime',                           verbose_name=_("Uptime"),                           filters=(filters.timesince_sortable,),                           attrs={'data-type': 'timesince'})    task = tables.Column(get_task_or_status,                         cell_attributes_getter=get_install_percent,                         verbose_name=_("Status"),                         filters=(safe,),                         status=True,                         status_choices=TASK_STATE_CHOICES)    def get_object_id(self, datum):        return str(datum.id)    def get_object_display(self, datum):        return datum.hostname</code></pre><p>通过tables.Column接口，会在界面上生成相应的表单，如hostname，personality 等。</p><p>HostsController类，控制节点的视图。HostsStorage类，HostsWorker类分别为存储和计算节点的视图类，主要包括增删改查的类，通过row_actions添加。<br><code><pre><br>class HostsController(Hosts):<br>    class Meta(object):<br>        name = "hostscontroller"<br>        verbose_name = _("Controller Hosts")<br>        status_columns = ["task"]<br>        row_class = UpdateRow<br>        multi_select = True<br>        row_actions = (<br>            EditHost, LockHost, ForceLockHost, UnlockHost, ForceUnlockHost,<br>            SwactHost,<br>            PowerOnHost,<br>            PowerOffHost, RebootHost,<br>            ResetHost, ReinstallHost, PatchInstallAsync, DeleteHost)<br>        table_actions = (AddHost,)<br>        hidden_title = False<br></pre></code><br>增删改查等功能的这些类都比较近似，主要是通过各自的handle（）方法来处理的，以DeleteHost类为例。<br><code><pre><br>class DeleteHost(tables.DeleteAction):<br>    ……<br>    def delete(self, request, host_id):<br>        stx_api.sysinv.host_delete(request, host_id)<br>    def handle(self, table, request, obj_ids):<br>        return handle_sysinv(self, table, request, obj_ids)<br></pre></code></p><p>当用户点击删除按钮时，会触发handle接口，从而在调用delete接口，delete调用sysinv的api通过cgts将请求发送给sysinv模块，sysinv删除节点</p><p>####4.    Tab页面管理####<br>starlingx_dashboard/dashboards/admin/inventory/tabs.py文件主要为各个tab页的类。<br>主要包括HostsTab，CpuProfilesTab，InterfaceProfilesTab，主要功能是获取环境的信息并按照一定的格式显示。<br>如HostsTab类：<br><code><pre><br>class HostsTab(tabs.TableTab):<br>    table_classes = (toplevel_tables.HostsController,<br>                     toplevel_tables.HostsStorage,<br>                     toplevel_tables.HostsWorker,<br>                     toplevel_tables.HostsUnProvisioned,)<br>      #此处四种类型的hosts节点的表<br>    template_name = ("admin/inventory/_hosts.html")<br>    #前端html页面<br>    通过接口获取所有节点信息，主要是通过下发api的方式获取，如：<br>    def get_all_hosts_data(self):<br>       ... ...<br>    stx_api.sysinv.host_list<br>    ... ...<br>    处理数据并以一定的格式显示数据到HTML上<br>    def load_table_data(self):<br>    ... ...<br>    def get_context_data(self, request):<br></pre></code><br>####5.     urls路由####</p><p>starlingx_dashboard/dashboards/admin/inventory/urls.py，此文件中为相关的路由，写在一起方便调用。</p><p>####6.    Views####<br>starlingx_dashboard/dashboards/admin/inventory/views.py，为视图文件</p><p>####7.    Workflows####<br>starlingx_dashboard/dashboards/admin/inventory/workflows.py，主要是AddHost和UpdateHost工作流程</p><p>以AddHost为例，<br><code><pre><br>class AddHost(workflows.Workflow):<br>    slug = "add"<br>    name = _("Add Host")<br>... ...<br>    def handle(self, request, data):<br>        self.hostname = data['hostname']<br>        self.mgmt_mac = data['mgmt_mac']<br>        try:<br>            host = stx_api.sysinv.host_create(request, **data)<br>            return True if host else False<br>        except exc.ClientException as ce:<br>            # Display REST API error on the GUI<br>            LOG.error(ce)<br>            msg = self.failure_message + " " + str(ce)<br>            self.failure_message = msg<br>            return False<br>        except Exception as e:<br>            msg = self.format_status_message(self.failure_message) + str(e)<br>            exceptions.handle(request, msg)<br>            return False<br></pre></code><br>主要是前台触发按钮后进入handle接口处理，将数据下发给sysinv模块，sysinv再根据数据添加节点。</p><p>Admin目录下还有active_alarms，controller_services，datanets，events，events_suppression，host_topology，inventory，software_management，storage_overview<br>，system_config等功能，他们都采用了统一Django架构，以及统一的代码风格，不同的模块之间可以相互参考。此处不再一一分析。</p><h3 id="DcAdmin"><a href="#DcAdmin" class="headerlink" title="DcAdmin"></a>DcAdmin</h3><p>此处为OpenStack多Region管理页面。</p><p>所谓openstack多region，就是多套openstack共享一个keystone和horizon。每个区域一套openstack环境，可以分布在不同的地理位置，只要网络可达就行。个人认为目的就是为了提供环境隔离的功能，选择启虚拟机的时候可以根据自己所处的位置就近选择。</p><p>目录：</p><p>主要包括管理页面显示，以及多region的软件管理功能。</p><h2 id="Api模块"><a href="#Api模块" class="headerlink" title="Api模块"></a>Api模块</h2><p>此部分内容主要包括”base”,”ceph”,”dc_manager”,”fm”,”neutron”,”patch”,”sysinv”,”vim”,<br>8部分的api接口，分别在不同的名称对应文件中方便管理。</p><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>starlingx_dashboard/api/base.py<br>此处、主要导入了开源的base接口<br>from openstack_dashboard.api import base</p><p>同时添加了两个公共接口，get_request_page_size（判断请求长度），is_stx_region（判断platform服务是否正常）</p><h3 id="ceph"><a href="#ceph" class="headerlink" title="ceph"></a>ceph</h3><p>主要实现了前台与底层ceph模块的交互<br>导入wrapper模块<br>from cephclient import wrapper</p><p>定义ceph模块的类如OSD，Cluster，Storage<br>以及处理函数cluster_get，storage_get _get_quorum_status，monitor_list，osd_list等，通过cephwrapper()进行与ceph后台模块的交互</p><p>如monitor_list接口：<br>在admin 的StorageServicesTab页面，需要显示storage_services的一些信息，通过调用get_monitors_data接口，调用到ceph.monitor_list，然后monitor_list通过cephwrapper接口将请求下发到ceph后台，请求成功后返回response<br>，再在monitor_list解析返回数据，返回给get_monitors_data接口。</p><h3 id="dc-manager"><a href="#dc-manager" class="headerlink" title="dc_manager"></a>dc_manager</h3><p>主要实现了前台与底层dc_manager模块的交互<br>导入交互需要的client模块<br>from dcmanagerclient.api.v1 import client<br>dcmanagerclient方法为将原有的client进行封装。</p><p>此部分的主要接口有，<br>获取告警的alarm_summary_list接口<br>获取子cloud信息的subcloud_list接口<br>增加子cloud信息的subcloud_create接口<br>删除子cloud信息的subcloud_delete接口<br>修改子cloud信息的subcloud_update接口<br>配置子cloud信息的subcloud_generate_config接口</p><p>软件升级策略的类Strategy及其相关的软件升级接口</p><h3 id="fm"><a href="#fm" class="headerlink" title="fm"></a>fm</h3><p>主要实现了前台与底层fm告警模块的交互</p><p>主要流程为用户触发告警页面的功能后，此部分模块通过fmclient接口，与底层的fm模块进行数据交互</p><h3 id="iservice"><a href="#iservice" class="headerlink" title="iservice"></a>iservice</h3><p>主要实现了前台与底层sm模块的交互<br>有两个接口<br>sm_sda_list 用于获取控制节点磁盘的信息<br>sm_nodes_list 用于获取节点信息<br>Neutron<br>主要实现了前台与底层Neutron网络模块的交互。<br>此处主要是添加了Providernet的api和qos的api组件。</p><p>包括<br>Providernet的接口：<br><code><pre><br>provider_network_type_list<br>provider_network_create<br>provider_network_list<br>provider_network_list_for_tenant<br>provider_network_list_tenant_networks<br>provider_network_get<br>provider_network_delete<br>provider_network_modify<br>provider_network_range_create<br>provider_network_range_list<br>provider_network_range_get<br>provider_network_range_delete<br>provider_network_range_modify<br></pre></code><br>和qos的接口：<br><code><pre><br>qos_list<br>qos_get<br>qos_create<br>qos_update<br></pre></code></p><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>主要实现了前台与底层patch模块的交互。url基本为url += “/patch/%s” % (api_cmd)</p><p>在这部分代码，定义了新的client类<br>class Client(object)，它的方法有patch的get，show，upload，apply，remove以及相关节点的host_install，host_install_async操作</p><p>apply patch在dashboard的流程</p><h3 id="sysinv"><a href="#sysinv" class="headerlink" title="sysinv"></a>sysinv</h3><p>主要实现了前台与底层sysinv模块的交互，主要功能是操作host节点的增删改查。</p><p>Cgtsclient主要是重新封装了cgts_client的接口，用于下发api。<br>主要的接口对应页面的内容可以分为以下几类：</p><ol><li>Host<br>主要有host信息查询的personality，boottime，patch_state，host操作的host_create，host_update，host_delete，host_lock，host_force_lock，host_unlock，host_reboot，host_swact等等。<br>此处调用大体是一致的，以host_swact为例：</li></ol><p>stx_api.sysinv.host_swact(request, host_id)<br>首先，调用host_swact接口<br><code><pre><br>def host_swact(request, host_id):<br>    kwargs = {'action': 'swact'}<br>    host = host_update(request, host_id, *<em>kwargs)<br>    return host<br></em></pre></code><br>   api部分拼接swact的参数，再传参到update接口，<br><code><pre><br>def host_update(request, host_id, *kwargs):<br>    LOG.debug("host_update(): host_id=%s, kwargs=%s", host_id, kwargs)<br>    mypatch = []<br>    for key, value in kwargs.items():<br>        mypatch.append(dict(path='/' + key, value=value, op='replace'))<br>    return cgtsclient(request).ihost.update(host_id, mypatch)<br></pre></code><br>   在update过程中，继续拼接至完整的api的 ulr字符串，再由cgtsclient下发到后台处理。</p><p>host_label_get，host_label_assign，host_label_remove等，功能是为host添加标签。</p><ol start="2"><li>网络<br>主要包括Interface， Network， Port，SDNController等<br>Interface<br><code><pre><br>host_interface_list<br>host_interface_get<br>host_interface_create<br>host_interface_update<br>host_interface_delete<br></pre></code><br>Network<br><code><pre><br>network_list<br>network_get<br>network_create<br>network_delete<br></pre></code><br>InterfaceNetwork<br><code><pre><br>interface_network_list_by_interface<br>interface_network_get<br></pre></code><br>Port<br><code><pre><br>get_port_display_name<br></pre></code><br>SDNController<br><code><pre><br>sdn_controller_list<br>sdn_controller_get<br>sdn_controller_create<br>sdn_controller_update<br>sdn_controller_delete<br></pre></code></li></ol><p>###3.    存储 ###<br>主要包括Disk的物理信息，ceph的配置信息，以及storage的配置信息等接口。</p><p>###4.    其他信息 ###<br>此外，还有一些其他信息的接口如，ntp，lldp等信息</p><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>主要实现了前台与底层patch模块中升级策略strategy的交互，主要功能为补丁的策略升级和版本升级。</p><p>文件中导入的client的类<br>from nfv_client.openstack import sw_update<br>STRATEGY_SW_PATCH = ‘sw-patch’<br>STRATEGY_SW_UPGRADE = ‘sw-upgrade’</p><p>此部分代码主要流程相似，以create_strategy为例。<br>create_strategy的流程</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>此部分主要分析主题开发过程的逻辑。</p><h3 id="1-主题配置文件"><a href="#1-主题配置文件" class="headerlink" title="1.    主题配置文件"></a>1.    主题配置文件</h3><p>starlingx_dashboard/local/local_settings.d/_30_stx_local_settings.py<br>此文件主要涵盖了主题文件的路径，配置，以及时区配置<br><code><pre><br>AVAILABLE_THEMES = [<br>    ('default', 'Default', 'themes/default'),<br>    ('material', 'Material', 'themes/material'),<br>    ('starlingx', 'StarlingX', 'themes/starlingx'),<br>]<br>DEFAULT_THEME = 'starlingx'<br></pre></code><br>从这部分代码，可以分析，我们如果要添加新的主题，需要在此处更新，并将DEFAULT_THEME改成我们需要的。<br><code><pre><br>for root, _dirs, files in os.walk('/opt/branding/applied'):<br>    if 'manifest.py' in files:<br>        with open(os.path.join(root, 'manifest.py')) as f:<br>            code = compile(f.read(), os.path.join(root, 'manifest.py'), 'exec')<br>            exec(code)</pre></code></p><pre><code>AVAILABLE_THEMES = [    (&apos;default&apos;, &apos;Default&apos;, &apos;themes/default&apos;),    (&apos;material&apos;, &apos;Material&apos;, &apos;themes/material&apos;),    (&apos;starlingx&apos;, &apos;StarlingX&apos;, &apos;themes/starlingx&apos;),    (&apos;custom&apos;, &apos;Custom&apos;, &apos;/opt/branding/applied&apos;),]DEFAULT_THEME = &apos;custom&apos;</code></pre><p>STATIC_ROOT = "/www/pages/static"<br>COMPRESS_OFFLINE = True<br><br>此部分代码中，可以看出’starlingx’主题的文件路径位于themes/starlingx目录。</p><h3 id="2．主题文件themes-starlingx"><a href="#2．主题文件themes-starlingx" class="headerlink" title="2．主题文件themes/starlingx"></a>2．主题文件themes/starlingx</h3><p>此部分文件主要是前台的html和css文件，一般 修改主题，不会大规模的修改html的样式，我们一般只是更换厂商的logo，修改平台名称等。<br>Logo文件位于starlingx_dashboard/themes/starlingx/static/img目录</p><p>logo-splash.svg 是登录界面的大logo，更换时替换自己的svg图片。<br>logo.png主页面左上的brand图片，注意大小即可。<br>此外，可以根据不同的风格修改前端代码进行定制开发。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;StarlingX-GUI-源码分析&quot;&gt;&lt;a href=&quot;#StarlingX-GUI-源码分析&quot; class=&quot;headerlink&quot; title=&quot;StarlingX GUI 源码分析&quot;&gt;&lt;/a&gt;StarlingX GUI 源码分析&lt;/h1&gt;&lt;p&gt;代码架构&lt;br&gt;GUI部分代码主要为starlingX dashboard的代码，主要功能为界面的操作和底层其他组件（Nova，Neutron，Cinder等）的交互。代码架构为Django框架。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="stx" scheme="https://mamamooo.github.io/tags/stx/"/>
    
  </entry>
  
  <entry>
    <title>Hallo Mamamoo</title>
    <link href="https://mamamooo.github.io/2020/03/14/ceshi/"/>
    <id>https://mamamooo.github.io/2020/03/14/ceshi/</id>
    <published>2020-03-14T08:48:42.000Z</published>
    <updated>2020-03-16T05:15:07.977Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/mamamooo/mamamooo.github.io/master/2020/03/14/ceshi/mamamoo.jpg" alt="mamamoo"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mamamooo/mamamooo.github.io/master/2020/03/14/ceshi/mamamoo.jpg&quot; alt=&quot;mamamoo&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
